/**
 * Copyright (c) 2012, Hadyn Richard
 *
 * Permission is hereby granted, free of charge, to any person obtaining a copy 
 * of this software and associated documentation files (the "Software"), to deal 
 * in the Software without restriction, including without limitation the rights to
 * use, copy, modify, merge, publish, distribute, sublicense, and/or sell copies
 * of the Software, and to permit persons to whom the Software is furnished to do
 * so, subject to the following conditions:
 *
 * The above copyright notice and this permission notice shall be included in 
 * all copies or substantial portions of the Software.
 *
 * THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR 
 * IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY, 
 * FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL 
 * THE AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER 
 * LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,
 * OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN 
 * THE SOFTWARE.
 */

package org.nova.net.packet.codec;

import org.nova.net.Packet;
import org.nova.net.PacketBlock;
import org.nova.net.packet.PacketFactory;
import org.nova.util.Decoder;

import java.nio.ByteBuffer;

/**
 * Created by Hadyn Richard
 */
public final class PacketDecoder extends PacketCodec implements Decoder<PacketDecoderState, Packet> {

    /**
     * The factory to use to create new packets.
     */
    private PacketFactory factory;

    /**
     * Constructs a new {@link PacketDecoder};
     *
     * @parma factory   The factory to use to create new packets.
     */
    public PacketDecoder(PacketFactory factory) {
        this.factory = factory;

        /* Check the state to assure everything is correct */
        checkState();
    }

    /**
     * Test the factory to check if the produced packets from the factory are valid.
     */
    private void checkState() {
        Packet packet = factory.create();
        if(!containsRequiredBlocks(packet)) {
            throw new IllegalStateException("packet generated by factory does not include required blocks");
        }
    }

    @Override
    public Packet decode(PacketDecoderState state) {

        /* TODO: Implement states within the packet decoder to check that we are currently at the correct stage */

        /* Create a new packet */
        Packet packet = factory.create();

        /* Encode each of the blocks into the buffer */
        for(String name : blocks) {
            PacketBlock block = packet.getPacketBlock(name);

            /* Decode the block */
            block.decode(state.getBuffer());

            /* Check if there is a transformer for a block and transform the block if needed */
            if(transformers.containsKey(name)) {
                block.decodeValue(transformers.get(name));
            }
        }

        return packet;
    }
}
